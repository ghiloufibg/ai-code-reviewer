openapi: 3.1.0
info:
  title: AI Code Reviewer API
  description: |
    Comprehensive API for AI-powered code review system with Angular frontend support.

    This API follows UI-first design principles, prioritizing frontend requirements while maintaining
    REST best practices and clean architecture principles.

    ## Features
    - **Authentication**: JWT-based with OAuth provider support
    - **Code Analysis**: File upload and repository-based analysis with real-time progress
    - **Repository Management**: Multi-provider SCM integration (GitHub, GitLab, Bitbucket)
    - **Review Tracking**: Merge request analysis with detailed results
    - **Configuration**: Comprehensive settings for LLM, tools, and preferences
    - **Real-time Updates**: Server-Sent Events for live progress tracking

    ## UI-Driven Design
    All endpoints are designed to minimize frontend API calls and provide rich data structures
    that match Angular component requirements exactly.
  version: 1.0.0
  contact:
    name: AI Code Reviewer Team
    email: api-support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.code-reviewer.example.com/v1
    description: Production server
  - url: https://staging-api.code-reviewer.example.com/v1
    description: Staging server
  - url: http://localhost:8080/api/v1
    description: Local development server

security:
  - bearerAuth: []

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Dashboard
    description: Dashboard statistics and overview data
  - name: Analysis
    description: Code analysis operations and file processing
  - name: Repositories
    description: Repository management and SCM provider integration
  - name: Reviews
    description: Merge request tracking and review management
  - name: Settings
    description: Configuration management and user preferences
  - name: System
    description: System health and administrative operations

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login with email/password
      description: Authenticate user with email and password, returns JWT token
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "john.doe@example.com"
              password: "securePassword123"
              rememberMe: false
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                refreshToken: "rf_abc123def456"
                tokenType: "Bearer"
                expiresIn: 3600
                user:
                  id: "550e8400-e29b-41d4-a716-446655440000"
                  username: "john.doe"
                  name: "John Doe"
                  email: "john.doe@example.com"
                  role: "user"
                  avatar: "https://avatars.example.com/john.doe.jpg"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'

  /auth/oauth/{provider}:
    post:
      tags: [Authentication]
      summary: OAuth authentication with provider
      description: Initiate OAuth flow with GitHub, GitLab, or other supported providers
      operationId: oauthLogin
      security: []
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [github, gitlab, bitbucket]
          description: OAuth provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthRequest'
      responses:
        '200':
          description: OAuth authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh access token
      description: Refresh expired access token using refresh token
      operationId: refreshToken
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: User logout
      description: Invalidate current session and tokens
      operationId: logout
      responses:
        '204':
          description: Logout successful

  /auth/user:
    get:
      tags: [Authentication]
      summary: Get current user profile
      description: Retrieve current authenticated user information
      operationId: getCurrentUser
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Dashboard Endpoints
  /dashboard/summary:
    get:
      tags: [Dashboard]
      summary: Get dashboard summary
      description: |
        Retrieve comprehensive dashboard data including statistics, recent bug reports,
        recent activity, and user information in a single aggregated response
      operationId: getDashboardSummary
      responses:
        '200':
          description: Dashboard summary data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardSummary'
              example:
                stats:
                  prsAnalyzed: 1247
                  averageReviewTime: "2.5 hours"
                  bugsDetected: 89
                  changes: ["↑12%", "↓3%", "↑8%"]
                user:
                  name: "John Doe"
                  role: "Senior Developer"
                  avatar: "https://avatars.example.com/john.doe.jpg"
                recentBugs:
                  - id: "bug-001"
                    title: "Potential SQL injection vulnerability"
                    file: "src/users/UserService.java"
                    severity: "High Priority"
                    timeAgo: "2 hours ago"
                recentActivity:
                  - id: "review-123"
                    title: "Feature: Add user authentication"
                    repository: "backend-api"
                    status: "completed"
                    time: "3 hours ago"

  /dashboard/bug-reports/{id}/resolve:
    post:
      tags: [Dashboard]
      summary: Mark bug report as resolved
      description: Mark a specific bug report as resolved by the user
      operationId: resolveBugReport
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Bug report identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResolveBugRequest'
      responses:
        '200':
          description: Bug report resolved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BugReportResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /dashboard/bug-reports/{id}/ignore:
    post:
      tags: [Dashboard]
      summary: Ignore bug report
      description: Mark a specific bug report as ignored/dismissed
      operationId: ignoreBugReport
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Bug report identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IgnoreBugRequest'
      responses:
        '200':
          description: Bug report ignored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BugReportResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  # Analysis Endpoints
  /analysis/upload:
    post:
      tags: [Analysis]
      summary: Upload files for analysis
      description: |
        Upload code files for AI analysis. Supports multiple files and returns
        analysis ID for tracking progress and results.
      operationId: uploadFilesForAnalysis
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
            encoding:
              files:
                style: form
                explode: true
      responses:
        '202':
          description: Files uploaded and analysis started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResponse'
              example:
                id: "analysis-uuid-123"
                status: "pending"
                message: "Analysis started successfully"
                createdAt: "2024-01-15T10:30:00Z"
                estimatedDuration: "5 minutes"
                filesCount: 3
                totalSize: 15420
        '400':
          $ref: '#/components/responses/BadRequest'
        '413':
          description: Files too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /analysis/{id}/status:
    get:
      tags: [Analysis]
      summary: Get analysis status
      description: Get current status and progress of a running analysis
      operationId: getAnalysisStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Analysis ID
      responses:
        '200':
          description: Analysis status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisStatus'
              example:
                id: "analysis-uuid-123"
                status: "in-progress"
                progress: 65
                currentStep: "AI Analysis"
                stepsCompleted: 2
                totalSteps: 3
                estimatedTimeRemaining: "2 minutes"
                startedAt: "2024-01-15T10:30:00Z"
        '404':
          $ref: '#/components/responses/NotFound'

  /analysis/{id}/stream:
    get:
      tags: [Analysis]
      summary: Real-time analysis progress stream
      description: |
        Server-Sent Events stream for real-time analysis progress updates.
        Use this endpoint to get live updates instead of polling the status endpoint.
      operationId: streamAnalysisProgress
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Analysis ID
      responses:
        '200':
          description: Server-Sent Events stream
          content:
            text/event-stream:
              schema:
                type: string
                description: |
                  SSE stream with events:
                  - status: Progress updates
                  - step: Step completion notifications
                  - result: Final results available
                  - error: Error notifications
              example: |
                event: status
                data: {"progress": 25, "step": "File Processing"}

                event: status
                data: {"progress": 50, "step": "Static Analysis"}

                event: status
                data: {"progress": 75, "step": "AI Analysis"}

                event: result
                data: {"status": "completed", "resultsReady": true}
        '404':
          $ref: '#/components/responses/NotFound'

  /analysis/{id}/results:
    get:
      tags: [Analysis]
      summary: Get analysis results
      description: Retrieve detailed analysis results for completed analysis
      operationId: getAnalysisResults
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Analysis ID
        - name: format
          in: query
          schema:
            type: string
            enum: [json, pdf, html]
            default: json
          description: Response format
      responses:
        '200':
          description: Analysis results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResults'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Analysis not completed yet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /analysis/{id}:
    delete:
      tags: [Analysis]
      summary: Cancel analysis
      description: Cancel a running analysis or delete analysis results
      operationId: cancelAnalysis
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Analysis ID
      responses:
        '204':
          description: Analysis cancelled or deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Cannot cancel completed analysis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Repositories Endpoints
  /repositories/connected:
    get:
      tags: [Repositories]
      summary: List connected repositories
      description: Get list of repositories connected to the system with their status
      operationId: getConnectedRepositories
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - name: provider
          in: query
          schema:
            type: string
            enum: [github, gitlab, bitbucket]
          description: Filter by SCM provider
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/RepositoryStatus'
          description: Filter by repository status
      responses:
        '200':
          description: List of connected repositories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryListResponse'
              example:
                content:
                  - id: "repo-123"
                    name: "backend-api"
                    provider:
                      id: "github"
                      name: "GitHub"
                      isConnected: true
                    status: "active"
                    lastActivity: "2024-01-15T09:30:00Z"
                    url: "https://github.com/org/backend-api"
                    isPrivate: false
                page:
                  current: 0
                  size: 20
                  totalElements: 45
                  totalPages: 3

  /repositories/providers:
    get:
      tags: [Repositories]
      summary: List available SCM providers
      description: Get list of supported SCM providers and their connection status
      operationId: getRepositoryProviders
      responses:
        '200':
          description: Available SCM providers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepositoryProvider'
              example:
                - id: "github"
                  name: "GitHub"
                  icon: "github"
                  authType: "oauth"
                  isConnected: true
                  connectionUrl: "https://github.com/login/oauth/authorize?..."
                - id: "gitlab"
                  name: "GitLab"
                  icon: "gitlab"
                  authType: "oauth"
                  isConnected: false
                  connectionUrl: "https://gitlab.com/oauth/authorize?..."

  /repositories/providers/{provider}/connect:
    post:
      tags: [Repositories]
      summary: Connect to SCM provider
      description: Initiate connection to a SCM provider (OAuth flow)
      operationId: connectProvider
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum: [github, gitlab, bitbucket]
          description: SCM provider to connect
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderConnectionRequest'
      responses:
        '200':
          description: Provider connection initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderConnectionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /repositories/available:
    get:
      tags: [Repositories]
      summary: List available repositories from provider
      description: Get repositories available for connection from a connected SCM provider
      operationId: getAvailableRepositories
      parameters:
        - name: provider
          in: query
          required: true
          schema:
            type: string
            enum: [github, gitlab, bitbucket]
          description: SCM provider
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - name: search
          in: query
          schema:
            type: string
          description: Search repositories by name
        - name: visibility
          in: query
          schema:
            type: string
            enum: [public, private, all]
            default: all
          description: Repository visibility filter
      responses:
        '200':
          description: Available repositories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableRepositoryListResponse'
        '401':
          description: Provider not connected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /repositories/connect:
    post:
      tags: [Repositories]
      summary: Connect repositories
      description: Connect selected repositories to the system for analysis
      operationId: connectRepositories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectRepositoriesRequest'
      responses:
        '202':
          description: Repository connection started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /repositories/bulk-connect:
    post:
      tags: [Repositories]
      summary: Bulk connect repositories
      description: Connect multiple repositories in a single operation
      operationId: bulkConnectRepositories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkConnectRequest'
      responses:
        '202':
          description: Bulk connection started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'

  /repositories/{id}/disconnect:
    delete:
      tags: [Repositories]
      summary: Disconnect repository
      description: Remove repository from the system and stop monitoring
      operationId: disconnectRepository
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Repository ID
      responses:
        '204':
          description: Repository disconnected successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /repositories/{id}/sync:
    post:
      tags: [Repositories]
      summary: Sync repository
      description: Force synchronization of repository data and status
      operationId: syncRepository
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Repository ID
      responses:
        '202':
          description: Repository sync started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  # Reviews Endpoints
  /reviews/merge-requests:
    get:
      tags: [Reviews]
      summary: List merge requests
      description: |
        Get paginated list of merge requests with filtering and sorting options.
        Supports real-time status updates and comprehensive filtering.
      operationId: getMergeRequests
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - name: status
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [open, merged, closed]
          style: form
          explode: false
          description: Filter by MR status
        - name: aiAnalysis
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [pending, in-progress, completed, failed]
          style: form
          explode: false
          description: Filter by AI analysis status
        - name: repository
          in: query
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
          description: Filter by repository names
        - name: author
          in: query
          schema:
            type: string
          description: Filter by author username
        - name: sort
          in: query
          schema:
            type: string
            enum: [openedAt, title, status, aiAnalysis, priority, repository]
            default: openedAt
          description: Sort field
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
      responses:
        '200':
          description: List of merge requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeRequestListResponse'

  /reviews/merge-requests/{id}:
    get:
      tags: [Reviews]
      summary: Get merge request details
      description: Get comprehensive details of a specific merge request including analysis results
      operationId: getMergeRequestDetails
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Merge request ID
      responses:
        '200':
          description: Merge request details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeRequestDetails'
        '404':
          $ref: '#/components/responses/NotFound'

  /reviews/merge-requests/{id}/analyze:
    post:
      tags: [Reviews]
      summary: Trigger MR analysis
      description: Start AI analysis for a specific merge request
      operationId: analyzeMergeRequest
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Merge request ID
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeRequest'
      responses:
        '202':
          description: Analysis started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Analysis already in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reviews/bulk-analyze:
    post:
      tags: [Reviews]
      summary: Bulk analyze merge requests
      description: Trigger analysis for multiple merge requests
      operationId: bulkAnalyzeMergeRequests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkAnalyzeRequest'
      responses:
        '202':
          description: Bulk analysis started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'

  /reviews/filters:
    get:
      tags: [Reviews]
      summary: Get available filters
      description: Get available filter options for merge requests with counts
      operationId: getMergeRequestFilters
      responses:
        '200':
          description: Available filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterOptions'

  /reviews/stats:
    get:
      tags: [Reviews]
      summary: Get reviews statistics
      description: Get overview statistics for reviews and analysis
      operationId: getReviewsStats
      responses:
        '200':
          description: Reviews statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewsStats'

  # Settings Endpoints
  /settings/llm:
    get:
      tags: [Settings]
      summary: Get LLM configuration
      description: Retrieve current LLM configuration and available models
      operationId: getLLMConfiguration
      responses:
        '200':
          description: LLM configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMConfig'

    put:
      tags: [Settings]
      summary: Update LLM configuration
      description: Update LLM configuration and model settings
      operationId: updateLLMConfiguration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LLMConfigUpdate'
      responses:
        '200':
          description: Configuration updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LLMConfig'
        '400':
          $ref: '#/components/responses/BadRequest'

  /settings/analysis-tools:
    get:
      tags: [Settings]
      summary: Get analysis tools configuration
      description: Get configuration for static analysis tools and AI analysis settings
      operationId: getAnalysisToolsConfiguration
      responses:
        '200':
          description: Analysis tools configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnalysisToolConfig'

    put:
      tags: [Settings]
      summary: Update analysis tools configuration
      description: Update configuration for analysis tools
      operationId: updateAnalysisToolsConfiguration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AnalysisToolConfigUpdate'
      responses:
        '200':
          description: Configuration updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnalysisToolConfig'

  /settings/preferences:
    get:
      tags: [Settings]
      summary: Get user preferences
      description: Get current user preferences and UI settings
      operationId: getUserPreferences
      responses:
        '200':
          description: User preferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'

    put:
      tags: [Settings]
      summary: Update user preferences
      description: Update user preferences and UI settings
      operationId: updateUserPreferences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferencesUpdate'
      responses:
        '200':
          description: Preferences updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'

  /settings/dashboard:
    get:
      tags: [Settings]
      summary: Get all settings dashboard
      description: |
        Get comprehensive settings data in a single aggregated response,
        optimized for settings dashboard UI requirements
      operationId: getSettingsDashboard
      responses:
        '200':
          description: Settings dashboard data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsDashboard'

  # System Endpoints
  /system/health:
    get:
      tags: [System]
      summary: System health check
      description: Get comprehensive system health status including all services
      operationId: getSystemHealth
      security: []
      responses:
        '200':
          description: System health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemHealth'
              example:
                status: "healthy"
                timestamp: "2024-01-15T10:30:00Z"
                services:
                  database:
                    status: "up"
                    responseTime: "15ms"
                  llm:
                    status: "up"
                    model: "deepseek-coder"
                    responseTime: "250ms"
                  github:
                    status: "up"
                    apiLimit: "4500/5000"
                uptime: "5d 12h 30m"
                version: "1.0.0"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth/login or /auth/oauth endpoints

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number (0-based)
      schema:
        type: integer
        minimum: 0
        default: 0

    SizeParam:
      name: size
      in: query
      description: Page size
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  responses:
    BadRequest:
      description: Bad request - invalid parameters or request body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "UNAUTHORIZED"
            message: "Authentication required"
            timestamp: "2024-01-15T10:30:00Z"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    RateLimited:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "RATE_LIMITED"
            message: "Too many requests. Please try again later."
            timestamp: "2024-01-15T10:30:00Z"

  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          format: password
          description: User password
        rememberMe:
          type: boolean
          default: false
          description: Keep user logged in for extended period

    OAuthRequest:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          description: OAuth authorization code
        state:
          type: string
          description: OAuth state parameter for security
        redirectUri:
          type: string
          format: uri
          description: Redirect URI used in OAuth flow

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: Refresh token

    AuthResponse:
      type: object
      required:
        - token
        - tokenType
        - expiresIn
        - user
      properties:
        token:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: Refresh token for token renewal
        tokenType:
          type: string
          enum: [Bearer]
          description: Token type
        expiresIn:
          type: integer
          description: Token expiration time in seconds
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      required:
        - id
        - username
        - email
        - role
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
        username:
          type: string
          description: Username
        name:
          type: string
          description: Full display name
        email:
          type: string
          format: email
          description: Email address
        role:
          type: string
          enum: [admin, user, viewer]
          description: User role
        avatar:
          type: string
          format: uri
          description: Avatar image URL
        createdAt:
          type: string
          format: date-time
          description: Account creation date
        lastLoginAt:
          type: string
          format: date-time
          description: Last login timestamp

    # Dashboard Schemas
    DashboardSummary:
      type: object
      required:
        - stats
        - user
        - recentBugs
        - recentActivity
      properties:
        stats:
          $ref: '#/components/schemas/DashboardStats'
        user:
          $ref: '#/components/schemas/User'
        recentBugs:
          type: array
          items:
            $ref: '#/components/schemas/BugReport'
          description: Recent high-priority bug reports
        recentActivity:
          type: array
          items:
            $ref: '#/components/schemas/ActivityItem'
          description: Recent review and analysis activity

    DashboardStats:
      type: object
      required:
        - prsAnalyzed
        - averageReviewTime
        - bugsDetected
      properties:
        prsAnalyzed:
          type: integer
          description: Total number of PRs analyzed
        averageReviewTime:
          type: string
          description: Human-readable average review time
        bugsDetected:
          type: integer
          description: Total bugs detected by AI analysis
        changes:
          type: array
          items:
            type: string
          description: Trend indicators (e.g., "↑12%", "↓3%")

    BugReport:
      type: object
      required:
        - id
        - title
        - severity
        - timeAgo
      properties:
        id:
          type: string
          description: Bug report identifier
        title:
          type: string
          description: Bug description
        file:
          type: string
          description: File where bug was found
        severity:
          type: string
          enum: [High Priority, Medium Priority, Low Priority]
          description: Bug severity level
        timeAgo:
          type: string
          description: Human-readable time since detection
        description:
          type: string
          description: Detailed bug description
        icon:
          type: string
          description: UI icon identifier
        iconColor:
          type: string
          description: Color theme for severity indication

    ActivityItem:
      type: object
      required:
        - id
        - title
        - status
        - time
      properties:
        id:
          type: string
          description: Activity item identifier
        title:
          type: string
          description: Activity description
        repository:
          type: string
          description: Repository name
        status:
          type: string
          enum: [pending, in-progress, completed, failed]
          description: Activity status
        time:
          type: string
          description: Human-readable time
        actionText:
          type: string
          description: Action button text

    ResolveBugRequest:
      type: object
      properties:
        resolution:
          type: string
          description: Resolution description
        resolvedBy:
          type: string
          description: User who resolved the bug

    IgnoreBugRequest:
      type: object
      properties:
        reason:
          type: string
          description: Reason for ignoring the bug
        ignoredBy:
          type: string
          description: User who ignored the bug

    BugReportResponse:
      type: object
      required:
        - id
        - status
        - updatedAt
      properties:
        id:
          type: string
          description: Bug report identifier
        status:
          type: string
          enum: [open, resolved, ignored]
          description: Updated bug status
        updatedAt:
          type: string
          format: date-time
          description: Status update timestamp

    # Analysis Schemas
    FileUploadRequest:
      type: object
      required:
        - files
      properties:
        files:
          type: array
          items:
            type: string
            format: binary
          description: Code files to analyze
        analysisOptions:
          $ref: '#/components/schemas/AnalysisOptions'

    AnalysisOptions:
      type: object
      properties:
        model:
          type: string
          description: LLM model to use
        staticAnalysis:
          type: boolean
          default: true
          description: Enable static analysis tools
        securityScan:
          type: boolean
          default: true
          description: Enable security scanning
        performanceAnalysis:
          type: boolean
          default: false
          description: Enable performance analysis

    AnalysisResponse:
      type: object
      required:
        - id
        - status
        - createdAt
      properties:
        id:
          type: string
          description: Analysis identifier
        status:
          type: string
          enum: [pending, in-progress, completed, failed]
          description: Analysis status
        message:
          type: string
          description: Status message
        createdAt:
          type: string
          format: date-time
          description: Analysis creation timestamp
        estimatedDuration:
          type: string
          description: Human-readable estimated duration
        filesCount:
          type: integer
          description: Number of files uploaded
        totalSize:
          type: integer
          description: Total size in bytes

    AnalysisStatus:
      type: object
      required:
        - id
        - status
        - progress
      properties:
        id:
          type: string
          description: Analysis identifier
        status:
          type: string
          enum: [pending, in-progress, completed, failed, cancelled]
        progress:
          type: integer
          minimum: 0
          maximum: 100
          description: Progress percentage
        currentStep:
          type: string
          description: Current processing step
        stepsCompleted:
          type: integer
          description: Number of steps completed
        totalSteps:
          type: integer
          description: Total number of steps
        estimatedTimeRemaining:
          type: string
          description: Human-readable time remaining
        startedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        error:
          type: string
          description: Error message if failed

    AnalysisResults:
      type: object
      required:
        - id
        - status
        - summary
      properties:
        id:
          type: string
          description: Analysis identifier
        status:
          type: string
          enum: [completed]
        summary:
          $ref: '#/components/schemas/AnalysisSummary'
        issues:
          type: array
          items:
            $ref: '#/components/schemas/CodeIssue'
        suggestions:
          type: array
          items:
            $ref: '#/components/schemas/CodeSuggestion'
        metrics:
          $ref: '#/components/schemas/AnalysisMetrics'
        fileResults:
          type: array
          items:
            $ref: '#/components/schemas/FileAnalysisResult'

    AnalysisSummary:
      type: object
      properties:
        overallScore:
          type: integer
          minimum: 0
          maximum: 100
          description: Overall code quality score
        totalIssues:
          type: integer
        criticalIssues:
          type: integer
        majorIssues:
          type: integer
        minorIssues:
          type: integer
        filesAnalyzed:
          type: integer
        linesAnalyzed:
          type: integer
        analysisTime:
          type: string
          description: Human-readable analysis duration

    CodeIssue:
      type: object
      required:
        - id
        - type
        - severity
        - title
        - file
        - line
      properties:
        id:
          type: string
          description: Issue identifier
        type:
          type: string
          enum: [bug, vulnerability, code_smell, style, performance, maintainability]
        severity:
          type: string
          enum: [critical, high, medium, low, info]
        title:
          type: string
          description: Issue title
        description:
          type: string
          description: Detailed description
        file:
          type: string
          description: File path
        line:
          type: integer
          description: Line number
        column:
          type: integer
          description: Column number
        endLine:
          type: integer
          description: End line for multi-line issues
        code:
          type: string
          description: Code snippet
        suggestion:
          type: string
          description: Fix suggestion
        rule:
          type: string
          description: Rule that triggered the issue
        tool:
          type: string
          description: Analysis tool (AI, ESLint, etc.)
        effort:
          type: string
          description: Estimated fix effort
        tags:
          type: array
          items:
            type: string
          description: Issue tags

    CodeSuggestion:
      type: object
      required:
        - id
        - title
        - file
        - originalCode
        - suggestedCode
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        file:
          type: string
        startLine:
          type: integer
        endLine:
          type: integer
        originalCode:
          type: string
        suggestedCode:
          type: string
        reasoning:
          type: string
        impact:
          type: string
          enum: [low, medium, high]
        category:
          type: string
          enum: [refactoring, optimization, best-practice, bug-fix]

    AnalysisMetrics:
      type: object
      properties:
        totalFiles:
          type: integer
        totalLines:
          type: integer
        analysisTime:
          type: integer
          description: Analysis time in seconds
        modelTokensUsed:
          type: integer
        staticAnalysisTime:
          type: integer
        aiAnalysisTime:
          type: integer

    FileAnalysisResult:
      type: object
      required:
        - path
        - status
      properties:
        path:
          type: string
        status:
          type: string
          enum: [analyzed, skipped, error]
        language:
          type: string
        lines:
          type: integer
        issues:
          type: array
          items:
            $ref: '#/components/schemas/CodeIssue'
        suggestions:
          type: array
          items:
            $ref: '#/components/schemas/CodeSuggestion'
        metrics:
          type: object
          description: File-specific metrics

    # Repository Schemas
    RepositoryListResponse:
      type: object
      required:
        - content
        - page
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Repository'
        page:
          $ref: '#/components/schemas/PageInfo'

    Repository:
      type: object
      required:
        - id
        - name
        - provider
        - status
      properties:
        id:
          type: string
          description: Repository identifier
        name:
          type: string
          description: Repository name
        provider:
          $ref: '#/components/schemas/RepositoryProvider'
        status:
          $ref: '#/components/schemas/RepositoryStatus'
        lastActivity:
          type: string
          format: date-time
        url:
          type: string
          format: uri
        description:
          type: string
        isPrivate:
          type: boolean
        branch:
          type: string
          description: Default branch
        owner:
          type: string
        permissions:
          $ref: '#/components/schemas/RepositoryPermissions'

    RepositoryProvider:
      type: object
      required:
        - id
        - name
        - authType
        - isConnected
      properties:
        id:
          type: string
          enum: [github, gitlab, bitbucket]
        name:
          type: string
        icon:
          type: string
        color:
          type: string
        authType:
          type: string
          enum: [oauth, token, username_password]
        isConnected:
          type: boolean
        connectionUrl:
          type: string
          format: uri
          description: OAuth connection URL

    RepositoryStatus:
      type: string
      enum: [active, syncing, error, inactive, pending_connection]

    RepositoryPermissions:
      type: object
      properties:
        canRead:
          type: boolean
        canWrite:
          type: boolean
        canAdmin:
          type: boolean
        canCreateHooks:
          type: boolean

    AvailableRepositoryListResponse:
      type: object
      required:
        - content
        - page
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/AvailableRepository'
        page:
          $ref: '#/components/schemas/PageInfo'

    AvailableRepository:
      type: object
      required:
        - id
        - name
        - provider
        - isPrivate
      properties:
        id:
          type: string
        name:
          type: string
        lastUpdated:
          type: string
          format: date-time
        selected:
          type: boolean
        provider:
          $ref: '#/components/schemas/RepositoryProvider'
        isPrivate:
          type: boolean
        description:
          type: string
        language:
          type: string
        stars:
          type: integer
        forks:
          type: integer

    ProviderConnectionRequest:
      type: object
      properties:
        authCode:
          type: string
          description: OAuth authorization code
        state:
          type: string
          description: OAuth state parameter

    ProviderConnectionResponse:
      type: object
      required:
        - status
        - provider
      properties:
        status:
          type: string
          enum: [connected, failed]
        provider:
          $ref: '#/components/schemas/RepositoryProvider'
        message:
          type: string

    ConnectRepositoriesRequest:
      type: object
      required:
        - repositories
      properties:
        repositories:
          type: array
          items:
            type: string
          description: Repository IDs to connect
        provider:
          type: string
          enum: [github, gitlab, bitbucket]

    BulkConnectRequest:
      type: object
      required:
        - repositories
        - provider
      properties:
        repositories:
          type: array
          items:
            type: string
        provider:
          type: string
          enum: [github, gitlab, bitbucket]

    BulkOperationResponse:
      type: object
      required:
        - operationId
        - status
      properties:
        operationId:
          type: string
        status:
          type: string
          enum: [started, completed, failed]
        estimatedDuration:
          type: string
        itemsCount:
          type: integer

    OperationResponse:
      type: object
      required:
        - operationId
        - status
      properties:
        operationId:
          type: string
        status:
          type: string
          enum: [started, in-progress, completed, failed]
        message:
          type: string

    # Review Schemas
    MergeRequestListResponse:
      type: object
      required:
        - content
        - page
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/MergeRequest'
        page:
          $ref: '#/components/schemas/PageInfo'
        filters:
          $ref: '#/components/schemas/FilterOptions'

    MergeRequest:
      type: object
      required:
        - id
        - title
        - number
        - repository
        - status
        - aiAnalysis
        - openedAt
        - author
      properties:
        id:
          type: string
        title:
          type: string
        number:
          type: string
        repository:
          type: string
        status:
          type: string
          enum: [open, merged, closed]
        aiAnalysis:
          type: string
          enum: [pending, in-progress, completed, failed]
        openedAt:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/Author'
        branch:
          $ref: '#/components/schemas/BranchInfo'
        metrics:
          $ref: '#/components/schemas/MergeRequestMetrics'
        reviewStatus:
          $ref: '#/components/schemas/ReviewStatus'
        priority:
          type: string
          enum: [high, medium, low]
        estimatedReviewTime:
          type: string
        lastUpdated:
          type: string
          format: date-time

    MergeRequestDetails:
      allOf:
        - $ref: '#/components/schemas/MergeRequest'
        - type: object
          properties:
            description:
              type: string
            reviewers:
              type: array
              items:
                $ref: '#/components/schemas/Reviewer'
            commits:
              type: array
              items:
                $ref: '#/components/schemas/Commit'
            fileChanges:
              type: array
              items:
                $ref: '#/components/schemas/FileChange'
            analysisResults:
              $ref: '#/components/schemas/AnalysisResults'

    Author:
      type: object
      required:
        - username
        - name
      properties:
        id:
          type: string
        username:
          type: string
        name:
          type: string
        email:
          type: string
        avatar:
          type: string
          format: uri
        profileUrl:
          type: string
          format: uri

    BranchInfo:
      type: object
      required:
        - source
        - target
      properties:
        source:
          type: string
        target:
          type: string
        sourceSha:
          type: string
        targetSha:
          type: string

    MergeRequestMetrics:
      type: object
      properties:
        changedFiles:
          type: integer
        additions:
          type: integer
        deletions:
          type: integer
        commits:
          type: integer
        conversations:
          type: integer
        unresolvedConversations:
          type: integer

    ReviewStatus:
      type: object
      properties:
        approved:
          type: integer
        changesRequested:
          type: integer
        totalReviewers:
          type: integer

    Reviewer:
      type: object
      required:
        - username
        - status
      properties:
        id:
          type: string
        username:
          type: string
        name:
          type: string
        avatar:
          type: string
          format: uri
        status:
          type: string
          enum: [pending, approved, changes_requested, commented]
        reviewedAt:
          type: string
          format: date-time
        isRequired:
          type: boolean

    Commit:
      type: object
      required:
        - sha
        - message
        - author
        - timestamp
      properties:
        sha:
          type: string
        message:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        timestamp:
          type: string
          format: date-time
        url:
          type: string
          format: uri
        verified:
          type: boolean

    FileChange:
      type: object
      required:
        - path
        - status
      properties:
        path:
          type: string
        status:
          type: string
          enum: [added, modified, deleted, renamed]
        additions:
          type: integer
        deletions:
          type: integer
        binary:
          type: boolean
        patch:
          type: string
        issues:
          type: array
          items:
            $ref: '#/components/schemas/CodeIssue'
        suggestions:
          type: array
          items:
            $ref: '#/components/schemas/CodeSuggestion'

    AnalyzeRequest:
      type: object
      properties:
        options:
          $ref: '#/components/schemas/AnalysisOptions'
        priority:
          type: string
          enum: [high, normal, low]
          default: normal

    BulkAnalyzeRequest:
      type: object
      required:
        - mergeRequestIds
      properties:
        mergeRequestIds:
          type: array
          items:
            type: string
        options:
          $ref: '#/components/schemas/AnalysisOptions'

    FilterOptions:
      type: object
      properties:
        status:
          type: array
          items:
            $ref: '#/components/schemas/FilterOption'
        aiAnalysis:
          type: array
          items:
            $ref: '#/components/schemas/FilterOption'
        repository:
          type: array
          items:
            $ref: '#/components/schemas/FilterOption'
        priority:
          type: array
          items:
            $ref: '#/components/schemas/FilterOption'

    FilterOption:
      type: object
      required:
        - label
        - value
      properties:
        label:
          type: string
        value:
          type: string
        count:
          type: integer
        active:
          type: boolean
        icon:
          type: string

    ReviewsStats:
      type: object
      properties:
        totalOpen:
          type: integer
        pendingAnalysis:
          type: integer
        completedToday:
          type: integer
        averageAnalysisTime:
          type: string

    # Settings Schemas
    LLMConfig:
      type: object
      required:
        - selectedModel
        - availableModels
        - apiConfiguration
      properties:
        selectedModel:
          type: string
        availableModels:
          type: array
          items:
            $ref: '#/components/schemas/LLMModel'
        apiConfiguration:
          $ref: '#/components/schemas/LLMApiConfig'
        advancedSettings:
          $ref: '#/components/schemas/LLMAdvancedSettings'

    LLMModel:
      type: object
      required:
        - id
        - name
        - provider
      properties:
        id:
          type: string
        name:
          type: string
        provider:
          type: string
        description:
          type: string
        capabilities:
          $ref: '#/components/schemas/ModelCapabilities'
        recommended:
          type: boolean
        available:
          type: boolean

    ModelCapabilities:
      type: object
      properties:
        maxTokens:
          type: integer
        supportsFunctions:
          type: boolean
        supportsStreaming:
          type: boolean
        costPerToken:
          type: number

    LLMApiConfig:
      type: object
      required:
        - provider
      properties:
        provider:
          type: string
          enum: [openai, anthropic, ollama, azure, custom]
        apiKey:
          type: string
          description: Masked API key
        endpoint:
          type: string
          format: uri
        organization:
          type: string
        timeout:
          type: integer
        maxTokens:
          type: integer
        temperature:
          type: number
          minimum: 0
          maximum: 1

    LLMAdvancedSettings:
      type: object
      properties:
        systemPrompt:
          type: string
        contextWindow:
          type: integer
        batchSize:
          type: integer
        retryAttempts:
          type: integer

    LLMConfigUpdate:
      type: object
      properties:
        selectedModel:
          type: string
        apiConfiguration:
          $ref: '#/components/schemas/LLMApiConfig'
        advancedSettings:
          $ref: '#/components/schemas/LLMAdvancedSettings'

    AnalysisToolConfig:
      type: object
      required:
        - id
        - name
        - enabled
        - category
      properties:
        id:
          type: string
        name:
          type: string
        enabled:
          type: boolean
        category:
          type: string
          enum: [static-analysis, security, performance, style, testing]
        configuration:
          type: object
          additionalProperties: true
        supportedLanguages:
          type: array
          items:
            type: string
        description:
          type: string
        documentationUrl:
          type: string
          format: uri

    AnalysisToolConfigUpdate:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        enabled:
          type: boolean
        configuration:
          type: object
          additionalProperties: true

    UserPreferences:
      type: object
      properties:
        theme:
          type: string
          enum: [light, dark, auto]
        language:
          type: string
        timezone:
          type: string
        dateFormat:
          type: string
        codeEditor:
          $ref: '#/components/schemas/CodeEditorPreferences'
        dashboard:
          $ref: '#/components/schemas/DashboardPreferences'

    CodeEditorPreferences:
      type: object
      properties:
        theme:
          type: string
        fontSize:
          type: integer
        lineHeight:
          type: number
        tabSize:
          type: integer
        wordWrap:
          type: boolean

    DashboardPreferences:
      type: object
      properties:
        defaultView:
          type: string
        refreshInterval:
          type: integer
        showNotifications:
          type: boolean

    UserPreferencesUpdate:
      type: object
      properties:
        theme:
          type: string
          enum: [light, dark, auto]
        language:
          type: string
        timezone:
          type: string
        codeEditor:
          $ref: '#/components/schemas/CodeEditorPreferences'
        dashboard:
          $ref: '#/components/schemas/DashboardPreferences'

    SettingsDashboard:
      type: object
      required:
        - llmConfig
        - analysisTools
        - preferences
        - systemStatus
      properties:
        llmConfig:
          $ref: '#/components/schemas/LLMConfig'
        analysisTools:
          type: array
          items:
            $ref: '#/components/schemas/AnalysisToolConfig'
        preferences:
          $ref: '#/components/schemas/UserPreferences'
        systemStatus:
          $ref: '#/components/schemas/SystemStatus'

    SystemStatus:
      type: object
      properties:
        llmConnected:
          type: boolean
        integrationsConnected:
          type: integer
        lastConfigUpdate:
          type: string
          format: date-time

    # System Schemas
    SystemHealth:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        services:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ServiceHealth'
        uptime:
          type: string
        version:
          type: string

    ServiceHealth:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [up, down, degraded]
        responseTime:
          type: string
        details:
          type: object
          additionalProperties: true
        lastCheck:
          type: string
          format: date-time

    # Common Schemas
    PageInfo:
      type: object
      required:
        - current
        - size
        - totalElements
        - totalPages
      properties:
        current:
          type: integer
          description: Current page number (0-based)
        size:
          type: integer
          description: Page size
        totalElements:
          type: integer
          description: Total number of elements
        totalPages:
          type: integer
          description: Total number of pages
        hasNext:
          type: boolean
        hasPrevious:
          type: boolean

    ErrorResponse:
      type: object
      required:
        - error
        - message
        - timestamp
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: string
          description: Additional error details
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          description: Request path
        traceId:
          type: string
          description: Request trace identifier for debugging